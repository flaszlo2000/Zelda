import json
from abc import ABC, abstractmethod
from configparser import ConfigParser
from pathlib import Path
from typing import Generic, List, Type, TypeVar, Union

from game_essentails.data.models.base import GameData, SingleValueData
from game_essentails.data.models.common_conf import CommonConfData

T = TypeVar("T", bound=GameData)
class DataLoader(ABC, Generic[T]):
    @abstractmethod
    def loadData(self, file_path: Path, dataclass_to_represent: Type[T]) -> List[T]:...

class JsonDataLoader(DataLoader[Union[GameData, SingleValueData]]):
    def loadData(self, file_path: Path, dataclass_to_represent: Type[Union[GameData, SingleValueData]]) -> List[Union[GameData, SingleValueData]]:
        result: List[Union[GameData, SingleValueData]] = list()

        with open(file_path, 'r') as file:
            data = json.load(file)

            for entity_name, entity_data in data.items():
                try:
                    if isinstance(entity_data, dict):
                        current_entity: Union[GameData, SingleValueData] = dataclass_to_represent(entity_name, **entity_data)
                    else:
                        if not issubclass(dataclass_to_represent, SingleValueData):
                            raise TypeError(f"{dataclass_to_represent} should be inherited from SingleValueData!")

                        current_entity = dataclass_to_represent(entity_name, entity_data)

                    result.append(current_entity)
                except TypeError as exc:
                    # if the loaded setting file has any missing parameters
                    print(f"[*] ERROR: data loading: {dataclass_to_represent=}: {exc} at {file_path}")

        return result

class ConfDataLoader(DataLoader[CommonConfData]):
    "This is a representation of a conf or ini file"
    @staticmethod
    def clearValue(input_value: str) -> str:
        "Removes surrounding ' or \" chars generated by ConfigParser"
        return input_value[1:-1]

    def loadData(self, file_path: Path, dataclass_to_represent: Type[CommonConfData]) -> List[CommonConfData]:
        result: List[CommonConfData] = list()
        config_parser = ConfigParser()
        config_parser.read(file_path)

        for section_name in config_parser.sections():
            for key, _value in config_parser.items(section_name):
                is_numeric = _value.isnumeric()
                final_value: Union[str, int] = _value

                if is_numeric:
                    final_value = int(_value)
                else:
                    if _value.startswith("'") or _value.endswith('"'):
                        # the ConfigParser will read strings like this '"apple"' or "'apple'" so we check this and if needed then remove
                        final_value = ConfDataLoader.clearValue(_value)

                result.append(dataclass_to_represent(name = key, value = final_value, is_numeric = is_numeric))

        return result

# TODO: toml, yaml ?
